#! /usr/bin/python -u
# -*- coding: utf-8 -*-
"""
#include <QtGui>
#include <QtWebKit>


int main(int argc, char **argv){
  QApplication app(argc, argv);
  QWebView wv;
  QWebPage *page = wv.page();
  QWebSettings *settings = page->settings();
  settings->setAttribute(QWebSettings::JavascriptEnabled, true);
  settings->setAttribute(QWebSettings::PluginsEnabled, true);
  wv.load(QUrl("http://www.youtube.com"));
  wv.show();
  return app.exec();
}


source:
http://stackoverflow.com/questions/6513311/pyqt-web-browser-focus-on-the-webpage-without-a-mouse-click
"""

import gc
import os
import re
import sys
import time
import urllib

try:
    from PyQt5 import QtCore
    from PyQt5 import QtWebKit
    from PyQt5 import QtWebKitWidgets
    from PyQt5 import QtWidgets
except ImportError:
    print("You need to install PythonQt in order to run this.")
    sys.exit(1)

TIMER = 60
DEBUG = True


def debug(msg):
    if DEBUG:
        sys.stdout.write("[%s] %s\n" % (time.ctime(time.time()), msg))


class raspresenterpy(QtWidgets.QDialog):
    def __init__(self):
        debug("Starting at %s" % time.ctime(time.time()))
        QtWidgets.QDialog.__init__(self)
        self.URLS = []
        self.url = ''
        self.web = QtWebKitWidgets.QWebView()
        self.time_start = time.time()
        self.keepalive = 0
        self.pid = os.getpid()

        self.readconf()

        debug("== Starting threads ==")
        self.th = QtBrowser(parent=self)
        self.th.start()

        self.th_wdog = QtWatchdog(parent=self)
        self.th_wdog.start()

        self.web.loadFinished.connect(self.web.setFocus)
        self.web.showFullScreen()

    @staticmethod
    def usage(errno=1):
        print("Use: %s <raspresenterpy.conf>" % sys.argv[0])
        sys.exit(errno)

    def readconf(self):
        try:
            conf = sys.argv[1]
            conflines = open(conf).readlines()
        except IOError as e:
            print(e.strerror)
            self.usage(e.errno)
        except IndexError as e:
            print(e)
            self.usage()

        for line in conflines:
            if not re.search("^http", line):
                continue
            debug("reading: %s" % line.rstrip())
            self.URLS.append(line.rstrip())

    def update(self, url):
        self.url = url
        debug("Updating to: %s" % self.url)
        # freeing memory
        QtWebKit.QWebSettings.clearMemoryCaches()
        QtWebKit.QWebSettings.OfflineStorageDatabaseEnabled = 1
        QtWebKit.QWebSettings.OfflineWebApplicationCacheEnabled = 1
        QtWebKit.QWebSettings.AcceleratedCompositingEnabled = 1
        QtWebKit.QWebSettings.TiledBackingStoreEnabled = 1
        self.web.stop()
        debug("loading {}".format(self.url))
        self.web.load(QtCore.QUrl(self.url))
        self.keepalive += 1
        debug("update(): keepalive=%d" % self.keepalive)

    def cleanupmemory(self):
        """
        Forcing to clean up memory to avoid OOM errors
        """
        debug("Forcing memory cleanup by QtWebKitWidgets.QWebView() object recreation")
        debug("cleanupmemory(): self.web.destroy()")
        self.web.destroy()
        debug("cleanupmemory(): calling GC")
        gc.collect()
        debug("cleanupmemory(): create new web object")
        self.web = QtWebKitWidgets.QWebView()
        debug("cleanupmemory(): load web and connect")
        self.web.loadFinished.connect(self.web.setFocus)
        debug("cleanupmemory(): make it full screen")
        self.web.showFullScreen()
        debug("cleanupmemory(): checking time")
        t_now = time.time()
        t_delta = t_now - self.time_start
        debug("Time started: %d\nTime now: %d\nTime delta:%d" %
              (t_now, self.time_start, t_delta))
        if t_delta > (2 * 60 * 60):
            debug("Reached maximum time (2 hours).  Restarting to save memory.")
            self.destroy()
            sys.exit(0)

    def show(self):
        debug("Starting app")
        # Forcing HTML5 settings to be enabled.
        """
        QtWebKitWidgets.QWebView *webView = new QtWebKitWidgets.QWebView();
        webView->settings()->setAttribute(QWebSettings::LocalContentCanAccessRemoteUrls, true);
        webView->page()->settings()->setAttribute(QWebSettings::JavascriptEnabled, true);
        webView->page()->settings()->setAttribute(QWebSettings::OfflineWebApplicationCacheEnabled, true);
        webView->page()->setLinkDelegationPolicy(QWebPage::DelegateAllLinks);
        webView->settings()->setUserStyleSheetUrl(QUrl("qrc:/path-your-css-file-in-resource-file.css"));
        """
        QtWebKit.QWebSettings.JavascriptEnabled = 1
        QtWebKit.QWebSettings.PluginsEnabled = 1
        QtWebKit.QWebSettings.OfflineStorageDatabaseEnabled = 1
        QtWebKit.QWebSettings.OfflineWebApplicationCacheEnabled = 1
        QtWebKit.QWebSettings.AcceleratedCompositingEnabled = 1
        QtWebKit.QWebSettings.TiledBackingStoreEnabled = 1


class QtBrowser(QtCore.QThread):
    cleanupmemory = QtCore.pyqtSignal()
    update = QtCore.pyqtSignal('QString')

    def __init__(self, parent=None):
        super(QtBrowser, self).__init__(parent)
        debug("Starting QtBrowser")
        self.cleanupmemory.connect(parent.cleanupmemory)
        self.update.connect(parent.update)
        debug("Signals connected")
        self.p = parent

    def run(self):
        while True:
            for url in self.p.URLS:
                # Let's check first if it is available
                try:
                    w = urllib.urlopen(url)
                except IOError:
                    debug("Link %s has I/O error" % url)
                    continue
                except Exception as e:
                    debug("Error: {}".format(e))
                    continue
                if w.getcode() != 200:
                    debug("Link %s shows error: %d" % (url, w.getcode()))
                    continue
                debug("Threading updating url to: %s" % url)
                self.p.url = url
                self.update.emit(url)
                self.sleep(TIMER)
            debug("Reached end of the list.  Calling clean up memory()")
            self.cleanupmemory.emit()


class QtWatchdog(QtCore.QThread):
    def __init__(self, parent=None):
        debug("Starting QtWatchdog")
        super(QtWatchdog, self).__init__(parent)
        self.p = parent

    def run(self):
        counter = self.p.keepalive
        while True:
            time.sleep(TIMER * 5)  # wait 5x the time to decide something
            current_counter = self.p.keepalive
            debug("QtWatchdog: counter=%d, current_counter=%d" % (counter, current_counter))

            if counter >= current_counter:
                debug("Detected some dead-lock (counter=%d, current_counter=%d).  Restarting..." %
                      (counter, current_counter))
                os.kill(self.p.pid, 9)
            else:
                counter = current_counter


if __name__ == '__main__':
    while True:
        # an extremely dumb keep-alive
        app = QtWidgets.QApplication(sys.argv)
        win = raspresenterpy()
        win.show()
        sys.exit(app.exec_())
